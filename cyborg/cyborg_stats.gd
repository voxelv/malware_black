extends Control

onready var version_nodes = {
	mb_lib.CYBORG_PART_TYPE_EYES: $Eyes/value,
	mb_lib.CYBORG_PART_TYPE_TORSO: $Torso/value,
	mb_lib.CYBORG_PART_TYPE_ARMS: $Arms/value,
	mb_lib.CYBORG_PART_TYPE_HANDS: $Hands/value,
	mb_lib.CYBORG_PART_TYPE_LEGS: $Legs/value,
	mb_lib.CYBORG_PART_TYPE_FEET: $Feet/value,
}

const WHITE = Color(1, 1, 1, 1)
const RED = Color(1, 0, 0, 1)
const GREEN = Color(0, 1, 0, 1)

func _ready():
	var c = factory.new_cyborg()
	c.add_part(factory.new_cyborg_part(0, null, 1, 2, 3))
#	$cyborg.add_part(factory.new_cyborg_part(mb_lib.CYBORG_PART_TYPE_EYES, null, 1, 2, 3))
#	$cyborg.add_part(factory.new_cyborg_part(mb_lib.CYBORG_PART_TYPE_TORSO, null, 1, 2, 3))
#	$cyborg.add_part(factory.new_cyborg_part(mb_lib.CYBORG_PART_TYPE_ARMS, null, 1, 2, 3))
#	$cyborg.add_part(factory.new_cyborg_part(mb_lib.CYBORG_PART_TYPE_HANDS, null, 1, 2, 3))
#	$cyborg.add_part(factory.new_cyborg_part(mb_lib.CYBORG_PART_TYPE_LEGS, null, 1, 2, 3))
#	$cyborg.add_part(factory.new_cyborg_part(mb_lib.CYBORG_PART_TYPE_FEET, null, 1, 2, 3))
	var live_sw = {
		0: factory.new_software(1, 2, 3),
		1: factory.new_software(1, 2, 3),
		2: factory.new_software(1, 2, 3),
		3: factory.new_software(1, 2, 3),
		4: factory.new_software(1, 2, 3),
		5: factory.new_software(1, 2, 3),
	}
	update_stats(c, live_sw)

func update_stats(cyborg, live_sw=null):
	for p in mb_lib.CYBORG_PART_TYPE.values():
		var val_node = version_nodes[p]
		val_node.modulate = WHITE
		
		if cyborg.has_part(p):
			val_node.text = cyborg.get_software_str(p)
		else:
			val_node.text = "?"
	
	if live_sw != null:
		_update_colors(cyborg, live_sw)

func _update_colors(cyborg, live_sw):
	for p in mb_lib.CYBORG_PART_TYPE.values():
		if not cyborg.has_part(p):
			continue
		var val_node = version_nodes[p]
		if cyborg.get_software(p).less_than(live_sw[p]):
			val_node.modulate = RED
		else:
			val_node.modulate = GREEN
