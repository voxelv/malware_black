extends Node

# Node Names
const BODY_HEALTH_METER = "body_health_meter"
const BODY_ARMOR_METER = "body_armor_meter"
const HEAL_BODY_BUTTON = "heal_body_button"
const REPAIR_ARMOR_BUTTON = "repair_armor_button"
const MANAGE_PROSTHETICS_BUTTON = "manage_prosthetics_button"

# Vars
var body_health = 100
var body_armor = 100
var cyborg_parts = [ null, null, null, null, null, null ]
var nodes = {
	BODY_HEALTH_METER: null,
	BODY_ARMOR_METER: null,
	MANAGE_PROSTHETICS_BUTTON: null,
	REPAIR_ARMOR_BUTTON: null,
	HEAL_BODY_BUTTON: null,
	}

func _ready():
	# TEMPORARY:
	body_health = int(rand_range(0, 100))
	body_armor = int(rand_range(0, 100))
	
	for node_name in nodes:
		nodes[node_name] = find_node(node_name)
	nodes[BODY_HEALTH_METER].value = body_health
	nodes[BODY_ARMOR_METER].value = body_armor

func _process(delta):
	update_cyborg_gui()
	
func update_cyborg_gui():
	nodes[BODY_HEALTH_METER].value = body_health
	nodes[BODY_ARMOR_METER].value = body_armor
	
	var repair_armor_values = {
		"amt": calculate_armor_repair_cost(), 
		"currency": mb_lib.CURRENCY
		}
	nodes[REPAIR_ARMOR_BUTTON].text = \
		"REPAIR ARMOR ({amt}{currency})".format(
			repair_armor_values)
	
	var heal_values = {
		"amt": calculate_heal_cost(),
		"currency": mb_lib.CURRENCY
		}
	nodes[HEAL_BODY_BUTTON].text = \
		"HEAL ({amt}{currency})".format(
		heal_values)

func calculate_armor_repair_cost():
	return(100 - body_armor)

func calculate_heal_cost():
	return(100 - body_health)



















