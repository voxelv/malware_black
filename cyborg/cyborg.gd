extends Node

# Node Names
const CYBORG_NAME = "cyborg_name"
const BODY_HEALTH_METER = "body_health_meter"
const BODY_ARMOR_METER = "body_armor_meter"
const HEAL_BODY_BUTTON = "heal_body_button"
const REPAIR_ARMOR_BUTTON = "repair_armor_button"
const MANAGE_CYBORG_PARTS_BUTTON = "manage_cyborg_parts_button"
const MANAGE_CYBORG_PARTS_POPUP = "manage_cyborg_parts_popup"
const CYBORG_PARTS_NODE_NAME = "cyborg_parts_node_name"
const CYBORG_PARTS_VIEW_NODE = "cyborg_parts_view_node"
const CYBORG_PARTS_DATA = "cyborg_parts_data"
const CYBORG_PARTS_LIST = "cyborg_parts_list"
const POPUP_SW_VERSION_NODE_NAME = "popup_sw_version_node_name"
const POPUP_LIVE_VERSION_NODE_NAME = "popup_live_version_node_name"
const POPUP_SW_VERSION_NODE = "popup_sw_version_node"
const POPUP_LIVE_VERSION_NODE = "popup_live_version_node"
const CYBORG_PART_DATA_NODE = "cyborg_part_data_node"
const POPUP_SW_UPDATE_BUTTON_NAME = "popup_sw_update_button_name"
const POPUP_SW_UPDATE_BUTTON = "popup_sw_update_button"

# Preloads
var cyborg_part_preload = preload("res://cyborg/cyborg_part.gd")
var sw_version_preload = preload("res://utl/sw_version.gd")

# Vars
var level = null
var cyborg_name = ""
var max_health = 100
var body_health = max_health
var max_armor = 100
var body_armor = max_armor
var nodes = {
	CYBORG_NAME: null,
	BODY_HEALTH_METER: null,
	BODY_ARMOR_METER: null,
	REPAIR_ARMOR_BUTTON: null,
	HEAL_BODY_BUTTON: null,
	MANAGE_CYBORG_PARTS_BUTTON: null,
	MANAGE_CYBORG_PARTS_POPUP: null,
	CYBORG_PARTS_LIST: null,
	}
var cyborg_parts = {
	mb_lib.CYBORG_PART_TYPE_HANDS: 	{CYBORG_PARTS_NODE_NAME: "cyborg_hands", 	CYBORG_PARTS_VIEW_NODE: null, CYBORG_PART_DATA_NODE: null},
	mb_lib.CYBORG_PART_TYPE_ARMS: 	{CYBORG_PARTS_NODE_NAME: "cyborg_arms", 	CYBORG_PARTS_VIEW_NODE: null, CYBORG_PART_DATA_NODE: null},
	mb_lib.CYBORG_PART_TYPE_EYES: 	{CYBORG_PARTS_NODE_NAME: "cyborg_eyes", 	CYBORG_PARTS_VIEW_NODE: null, CYBORG_PART_DATA_NODE: null},
	mb_lib.CYBORG_PART_TYPE_TORSO: 	{CYBORG_PARTS_NODE_NAME: "cyborg_torso", 	CYBORG_PARTS_VIEW_NODE: null, CYBORG_PART_DATA_NODE: null},
	mb_lib.CYBORG_PART_TYPE_LEGS: 	{CYBORG_PARTS_NODE_NAME: "cyborg_legs", 	CYBORG_PARTS_VIEW_NODE: null, CYBORG_PART_DATA_NODE: null},
	mb_lib.CYBORG_PART_TYPE_FEET: 	{CYBORG_PARTS_NODE_NAME: "cyborg_feet", 	CYBORG_PARTS_VIEW_NODE: null, CYBORG_PART_DATA_NODE: null},
}
var popup_nodes = {
	mb_lib.CYBORG_PART_TYPE_HANDS: {POPUP_SW_VERSION_NODE_NAME: "hands_sw_version", POPUP_LIVE_VERSION_NODE_NAME: "hands_live_version", POPUP_SW_UPDATE_BUTTON_NAME: "hands_update_button", POPUP_SW_VERSION_NODE: null, POPUP_LIVE_VERSION_NODE: null, POPUP_SW_UPDATE_BUTTON: null},
	mb_lib.CYBORG_PART_TYPE_ARMS: {POPUP_SW_VERSION_NODE_NAME: "arms_sw_version", POPUP_LIVE_VERSION_NODE_NAME: "arms_live_version", POPUP_SW_UPDATE_BUTTON_NAME: "arms_update_button", POPUP_SW_VERSION_NODE: null, POPUP_LIVE_VERSION_NODE: null, POPUP_SW_UPDATE_BUTTON: null},
	mb_lib.CYBORG_PART_TYPE_EYES: {POPUP_SW_VERSION_NODE_NAME: "eyes_sw_version", POPUP_LIVE_VERSION_NODE_NAME: "eyes_live_version", POPUP_SW_UPDATE_BUTTON_NAME: "eyes_update_button", POPUP_SW_VERSION_NODE: null, POPUP_LIVE_VERSION_NODE: null, POPUP_SW_UPDATE_BUTTON: null},
	mb_lib.CYBORG_PART_TYPE_TORSO: {POPUP_SW_VERSION_NODE_NAME: "torso_sw_version", POPUP_LIVE_VERSION_NODE_NAME: "torso_live_version", POPUP_SW_UPDATE_BUTTON_NAME: "torso_update_button", POPUP_SW_VERSION_NODE: null, POPUP_LIVE_VERSION_NODE: null, POPUP_SW_UPDATE_BUTTON: null},
	mb_lib.CYBORG_PART_TYPE_LEGS: {POPUP_SW_VERSION_NODE_NAME: "legs_sw_version", POPUP_LIVE_VERSION_NODE_NAME: "legs_live_version", POPUP_SW_UPDATE_BUTTON_NAME: "legs_update_button", POPUP_SW_VERSION_NODE: null, POPUP_LIVE_VERSION_NODE: null, POPUP_SW_UPDATE_BUTTON: null},
	mb_lib.CYBORG_PART_TYPE_FEET: {POPUP_SW_VERSION_NODE_NAME: "feet_sw_version", POPUP_LIVE_VERSION_NODE_NAME: "feet_live_version", POPUP_SW_UPDATE_BUTTON_NAME: "feet_update_button", POPUP_SW_VERSION_NODE: null, POPUP_LIVE_VERSION_NODE: null, POPUP_SW_UPDATE_BUTTON: null},
}

func _ready():
	# TEMPORARY:
	body_health = int(randi() % max_health)
	body_armor = int(randi() % max_armor)
	add_cyborg_part(mb_lib.CYBORG_PART_TYPE_EYES)
	
	for node_name in nodes:
		nodes[node_name] = find_node(node_name)
	
	for cyborg_part_type in cyborg_parts:
		cyborg_parts[cyborg_part_type][CYBORG_PARTS_VIEW_NODE] = find_node(cyborg_parts[cyborg_part_type][CYBORG_PARTS_NODE_NAME])
	
	for part in popup_nodes:
		popup_nodes[part][POPUP_SW_VERSION_NODE] = find_node(popup_nodes[part][POPUP_SW_VERSION_NODE_NAME])
		popup_nodes[part][POPUP_LIVE_VERSION_NODE] = find_node(popup_nodes[part][POPUP_LIVE_VERSION_NODE_NAME])
		popup_nodes[part][POPUP_SW_UPDATE_BUTTON] = find_node(popup_nodes[part][POPUP_SW_UPDATE_BUTTON_NAME])
		popup_nodes[part][POPUP_SW_UPDATE_BUTTON].connect("pressed", self, "popup_update_button_pressed", [part])
	
	nodes[BODY_HEALTH_METER].value = body_health
	nodes[BODY_ARMOR_METER].value = body_armor
	
	cyborg_name = mb_lib.CYBORG_NAMES[randi() % len(mb_lib.CYBORG_NAMES)]
	
	# Connections
	nodes[CYBORG_NAME].connect("text_entered", self, "name_entered")
	nodes[HEAL_BODY_BUTTON].connect("pressed", self, "heal_body_button_pressed")
	nodes[REPAIR_ARMOR_BUTTON].connect("pressed", self, "repair_armor_button_pressed")
	nodes[MANAGE_CYBORG_PARTS_BUTTON].connect("pressed", self, "manage_cyborg_parts_button_pressed")

func _process(delta):
	update_cyborg_gui()

func set_level(level_obj):
	level = level_obj
	return(self)

func update_cyborg_gui():
	var health_meter = nodes[BODY_HEALTH_METER]
	var armor_meter = nodes[BODY_ARMOR_METER]
	nodes[CYBORG_NAME].text = cyborg_name
	health_meter.value = (float(body_health) / float(max_health)) * health_meter.max_value
	armor_meter.value = (float(body_armor) / float(max_armor)) * armor_meter.max_value
	
	var repair_btn = nodes[REPAIR_ARMOR_BUTTON]
	if body_armor < max_armor:
		repair_btn.set_disabled(false)
		var repair_armor_values = {
			"amt": calculate_armor_repair_cost(), 
			"currency": mb_lib.CURRENCY
			}
		repair_btn.text = "REPAIR ARMOR ({amt}{currency})".format(repair_armor_values)
	else:
		repair_btn.set_disabled(true)
		repair_btn.text = "REPAIR ARMOR"

	var heal_btn = nodes[HEAL_BODY_BUTTON]
	if body_health < max_health:
		heal_btn.set_disabled(false)
		var heal_values = {
			"amt": calculate_heal_cost(),
			"currency": mb_lib.CURRENCY
			}
		heal_btn.text = "HEAL ({amt}{currency})".format(heal_values)
	else:
		heal_btn.set_disabled(true)
		heal_btn.text = "HEAL"
	
	for p in popup_nodes:
		var live_version = null
		if level != null:
			live_version = level.get_cyborg_part_version_for_type(p)
			popup_nodes[p][POPUP_LIVE_VERSION_NODE].text = live_version.get_str()
		if cyborg_parts[p][CYBORG_PART_DATA_NODE] == null:
			pass # TODO: Make popup row disappear or whatever
		else:
			# Update sw version labels
			popup_nodes[p][POPUP_SW_VERSION_NODE].text = cyborg_parts[p][CYBORG_PART_DATA_NODE].sw_version.get_str()
			if live_version != null:
				if cyborg_parts[p][CYBORG_PART_DATA_NODE].sw_version.less_than(live_version):
					popup_nodes[p][POPUP_SW_UPDATE_BUTTON].set_icon_color(Color(1, 0, 0, 1))
				else:
					popup_nodes[p][POPUP_SW_UPDATE_BUTTON].set_icon_color(Color(0, 1, 0, 1))

func add_cyborg_part(type):
	cyborg_parts[type][CYBORG_PART_DATA_NODE] = cyborg_part_preload.new()

func calculate_armor_repair_cost():
	return(max_armor - body_armor)

func calculate_heal_cost():
	return(max_health - body_health)

func name_entered(new_text):
	cyborg_name = new_text
	nodes[CYBORG_NAME].release_focus()
	print(cyborg_name)

func heal_body_button_pressed():
	var cost = calculate_heal_cost()
	# TODO: TAKE CURRENCY OUT OF BANK
	body_health = max_health

func repair_armor_button_pressed():
	var cost = calculate_armor_repair_cost()
	# TODO: TAKE CURRENCY OUT OF BANK
	body_armor = max_armor

func manage_cyborg_parts_button_pressed():
	nodes[MANAGE_CYBORG_PARTS_POPUP].popup_centered_minsize(Vector2(250, 100))

func popup_update_button_pressed(part_type):
	var live_version = level.get_cyborg_part_version_for_type(part_type)
	var new_version = sw_version_preload.new().set_version(live_version.sw_major, live_version.sw_minor, live_version.sw_rev)
	cyborg_parts[part_type][CYBORG_PART_DATA_NODE].sw_version = new_version













