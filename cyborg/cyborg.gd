extends Node

# Node Names
const CYBORG_NAME = "cyborg_name"
const BODY_HEALTH_METER = "body_health_meter"
const BODY_ARMOR_METER = "body_armor_meter"
const HEAL_BODY_BUTTON = "heal_body_button"
const REPAIR_ARMOR_BUTTON = "repair_armor_button"
const MANAGE_PROSTHETICS_BUTTON = "manage_prosthetics_button"

# Vars
var cyborg_name = ""
var max_health = 100
var body_health = max_health
var max_armor = 100
var body_armor = max_armor
var cyborg_parts = [ null, null, null, null, null, null ]
var nodes = {
	CYBORG_NAME: null,
	BODY_HEALTH_METER: null,
	BODY_ARMOR_METER: null,
	MANAGE_PROSTHETICS_BUTTON: null,
	REPAIR_ARMOR_BUTTON: null,
	HEAL_BODY_BUTTON: null,
	}

func _ready():
	# TEMPORARY:
	body_health = int(rand_range(0, max_health))
	body_armor = int(rand_range(0, max_armor))
	
	for node_name in nodes:
		nodes[node_name] = find_node(node_name)
	
	nodes[BODY_HEALTH_METER].value = body_health
	nodes[BODY_ARMOR_METER].value = body_armor
	
	nodes[CYBORG_NAME].connect("text_entered", self, "name_entered")
	nodes[HEAL_BODY_BUTTON].connect("pressed", self, "heal_body_button_pressed")
	nodes[REPAIR_ARMOR_BUTTON].connect("pressed", self, "repair_armor_button_pressed")

func _process(delta):
	update_cyborg_gui()
	
func update_cyborg_gui():
	var health_meter = nodes[BODY_HEALTH_METER]
	var armor_meter = nodes[BODY_ARMOR_METER]
	health_meter.value = (float(body_health) / float(max_health)) * health_meter.max_value
	armor_meter.value = (float(body_armor) / float(max_armor)) * armor_meter.max_value
	
	var repair_btn = nodes[REPAIR_ARMOR_BUTTON]
	if body_armor < max_armor:
		repair_btn.set_disabled(false)
		var repair_armor_values = {
			"amt": calculate_armor_repair_cost(), 
			"currency": mb_lib.CURRENCY
			}
		repair_btn.text = "REPAIR ARMOR ({amt}{currency})".format(repair_armor_values)
	else:
		repair_btn.set_disabled(true)
		repair_btn.text = "REPAIR ARMOR"

	var heal_btn = nodes[HEAL_BODY_BUTTON]
	if body_health < max_health:
		heal_btn.set_disabled(false)
		var heal_values = {
			"amt": calculate_heal_cost(),
			"currency": mb_lib.CURRENCY
			}
		heal_btn.text = "HEAL ({amt}{currency})".format(heal_values)
	else:
		heal_btn.set_disabled(true)
		heal_btn.text = "HEAL"

func calculate_armor_repair_cost():
	return(max_armor - body_armor)

func calculate_heal_cost():
	return(max_health - body_health)

func name_entered(new_text):
	cyborg_name = new_text
	nodes[CYBORG_NAME].release_focus()
	print(cyborg_name)

func heal_body_button_pressed():
	var cost = calculate_heal_cost()
	# TODO: TAKE CURRENCY OUT OF BANK
	body_health = max_health

func repair_armor_button_pressed():
	var cost = calculate_armor_repair_cost()
	# TODO: TAKE CURRENCY OUT OF BANK
	body_armor = max_armor


















