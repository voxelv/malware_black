extends Node

signal manage_gadgets_button_pressed

# Vars
var live_sw = null
var max_health = 100
var health = max_health
var max_armor = 100
var armor = max_armor

# onready Nodes
onready var cyborg_name = find_node("cyborg_name")
onready var cyborg = find_node("cyborg")
onready var cyborg_stats = find_node("cyborg_stats")
onready var health_meter = find_node("health_meter")
onready var armor_meter = find_node("armor_meter")
onready var repair_button = find_node("repair_button")
onready var heal_button = find_node("heal_button")
onready var manage_gadgets_button = find_node("manage_gadgets_button")
onready var cyborg_container = find_node("cyborg_container")

func _ready():
	# TEMPORARY:
	health = int(randi() % max_health)
	armor = int(randi() % max_armor)
	
	cyborg_name.text = mb_lib.CYBORG_NAMES[randi() % len(mb_lib.CYBORG_NAMES)]
	cyborg.display_name = cyborg_name.text
	
	cyborg.add_part(factory.new_cyborg_part(0, null, 1, 2, 3))
	cyborg.add_part(factory.new_cyborg_part(1, null, 1, 2, 3))
	cyborg.add_part(factory.new_cyborg_part(2, null, 1, 2, 3))
	cyborg.add_part(factory.new_cyborg_part(3, null, 3, 4, 5))
	
	# Connections
	cyborg_name.connect("text_entered", self, "name_entered")
	cyborg_name.connect("text_changed", self, "name_entered")
	heal_button.connect("pressed", self, "heal_button_pressed")
	repair_button.connect("pressed", self, "repair_button_pressed")
	manage_gadgets_button.connect("pressed", self, "on_manage_gadgets_button_pressed")

func _process(delta):
	update_cyborg_gui()

func set_data(max_health, max_armor):
	self.max_health = max_health
	self.max_armor = max_armor

func update_cyborg_gui():
	health_meter.value = (float(health) / float(max_health)) * health_meter.max_value
	armor_meter.value = (float(armor) / float(max_armor)) * armor_meter.max_value
	
	if armor < max_armor:
		repair_button.set_disabled(false)
		var repair_armor_values = {
			"amt": calculate_armor_repair_cost(), 
			"currency": mb_lib.CURRENCY
			}
		repair_button.text = "REPAIR ({amt}{currency})".format(repair_armor_values)
	else:
		repair_button.set_disabled(true)
		repair_button.text = "REPAIR"

	if health < max_health:
		heal_button.set_disabled(false)
		var heal_values = {
			"amt": calculate_heal_cost(),
			"currency": mb_lib.CURRENCY
			}
		heal_button.text = "HEAL ({amt}{currency})".format(heal_values)
	else:
		heal_button.set_disabled(true)
		heal_button.text = "HEAL"
	
	cyborg_stats.update_stats(cyborg, live_sw)

func set_live_sw(new_live_sw):
	live_sw = new_live_sw

func add_cyborg_part(type, version):
	var new_part = factory.new_cyborg_part(type, version)
	cyborg.add_part(new_part)

func calculate_armor_repair_cost():
	return(max_armor - armor)

func calculate_heal_cost():
	return(max_health - health)

func name_changed(new_text):
	cyborg.display_name = new_text

func name_entered(new_text):
	cyborg.display_name = new_text
	cyborg_name.release_focus()

func heal_button_pressed():
	var cost = calculate_heal_cost()
	# TODO: TAKE CURRENCY OUT OF BANK
	health = max_health

func repair_button_pressed():
	var cost = calculate_armor_repair_cost()
	# TODO: TAKE CURRENCY OUT OF BANK
	armor = max_armor

func get_cyborg_name():
	return cyborg.display_name

func on_manage_gadgets_button_pressed():
	emit_signal("manage_gadgets_button_pressed", get_position_in_parent())

