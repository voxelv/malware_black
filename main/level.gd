extends Node

# Node Names
const MISSION_TYPE = "mission_type"
const DESC = "desc"

# Variables
var credits = 0
var next_mission = 0
var _cyborg_index_for_popup = null

# onready vars
onready var cyborg_list = find_node("cyborg_list")
onready var mission_list = find_node("mission_list")
onready var mission_timer = find_node("mission_timer")
onready var gadgets_popup = find_node("gadgets_popup")

var mission_roll = [
	{   
		MISSION_TYPE: mb_lib.MISSION_ATTACK,
		DESC: "Test Description is super long so that it can be scrolled up and down. This helps test things some more. Actually there's quite a bit of space here. It's interesting.",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_DEFEND,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_ESCORT,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_AMBUSH,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_SURVEILLANCE,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_COUNTER_INTELLIGENCE,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_ASSASINATE,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_BODYGUARD,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_GUARD,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_INFILTRATE,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_SEARCH_AND_DESTROY,
		DESC: "Test Description",
	},
	{
		MISSION_TYPE: mb_lib.MISSION_CONSTRUCT_OUTPOSTS,
		DESC: "Test Description",
	},
]

var live_sw = {
	mb_lib.CYBORG_PART_TYPE_EYES: factory.new_software(1, 2, 3),
	mb_lib.CYBORG_PART_TYPE_ARMS: factory.new_software(2, 3, 4),
	mb_lib.CYBORG_PART_TYPE_HANDS: factory.new_software(3, 4, 5),
	mb_lib.CYBORG_PART_TYPE_TORSO: factory.new_software(4, 5, 6),
	mb_lib.CYBORG_PART_TYPE_LEGS: factory.new_software(5, 6, 7),
	mb_lib.CYBORG_PART_TYPE_FEET: factory.new_software(6, 7, 8),
}

func _input(event):
	if event is InputEventKey and event.scancode == KEY_ESCAPE and event.pressed:
		mission_select_button_pressed(null)
	if event is InputEventKey and event.scancode == KEY_SPACE and event.pressed:
		var new_cm = factory.new_cyborg_manage()
		cyborg_list.add_child(new_cm)
		new_cm.connect("manage_gadgets_button_pressed", self, "on_manage_gadgets_button_pressed")
		send_live_sw()

func _ready():
	# Connections
	get_tree().get_root().connect("size_changed", self, "on_window_size_changed")
	gadgets_popup.connect("part_update", self, "on_gadgets_part_update")
	gadgets_popup.connect("popup_hide", self, "on_gadgets_popup_hide")
	mission_timer.connect("timeout", self, "mission_timer_timeout")
	
	send_live_sw()

func mission_timer_timeout():
	new_mission()

func new_mission():
	if next_mission < len(mission_roll):
		var next_mission_info = mission_roll[next_mission]
		var new_mission = factory.new_misison(next_mission_info[MISSION_TYPE], next_mission_info[DESC])
		mission_list.add_child(new_mission)
		new_mission.connect("cyborgs_button_pressed", self, "on_mission_cyborgs_button_pressed")
		next_mission += 1
	else:
		mission_timer.stop()

func on_window_size_changed():
	var PAD = 6
	var CYBORG_W = 253
	
	var new_size = get_viewport().size
	var cols = (new_size.x - PAD) / CYBORG_W
	cyborg_list.columns = cols
	mission_list.columns = cols

func send_live_sw():
	for c in cyborg_list.get_children():
		c.set_live_sw(live_sw)

func on_manage_gadgets_button_pressed(index):
	_cyborg_index_for_popup = index
	var cyborg = cyborg_list.get_child(index).cyborg
	gadgets_popup.update_data(cyborg, live_sw)
	gadgets_popup.popup_centered_minsize(Vector2(250, 100))

func on_gadgets_popup_hide():
	_cyborg_index_for_popup = null

func on_gadgets_part_update(part_type):
	var cyborg = cyborg_list.get_child(_cyborg_index_for_popup).cyborg
	cyborg.set_software(part_type, live_sw[part_type])
	gadgets_popup.update_data(cyborg, live_sw)

func on_mission_cyborgs_button_pressed(mission_index):
	print("MISSION CYBORGS PRESSED: " + str(mission_index))





















