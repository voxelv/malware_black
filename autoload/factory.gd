extends Node

# Preloads
var Software = preload("res://utl/software.gd")

var Cyborg = preload("res://cyborg/cyborg.tscn")
var CyborgPartEyes = preload("res://cyborg/parts/eyes.tscn")
var CyborgPartTorso = preload("res://cyborg/parts/torso.tscn")
var CyborgPartArms = preload("res://cyborg/parts/arms.tscn")
var CyborgPartHands = preload("res://cyborg/parts/hands.tscn")
var CyborgPartLegs = preload("res://cyborg/parts/legs.tscn")
var CyborgPartFeet = preload("res://cyborg/parts/feet.tscn")
var CyborgManage = preload("res://cyborg/cyborg_manage.tscn")

var Mission = preload("res://mission/mission.tscn")

func new_cyborg_part(type, version=null, major=null, minor=null, rev=null):
	var Part = {
		mb_lib.CYBORG_PART_TYPE_EYES: CyborgPartEyes,
		mb_lib.CYBORG_PART_TYPE_TORSO: CyborgPartTorso,
		mb_lib.CYBORG_PART_TYPE_ARMS: CyborgPartArms,
		mb_lib.CYBORG_PART_TYPE_HANDS: CyborgPartHands,
		mb_lib.CYBORG_PART_TYPE_LEGS: CyborgPartLegs,
		mb_lib.CYBORG_PART_TYPE_FEET: CyborgPartFeet,
	}[type]
	
	if version != null and major == null and minor == null and rev == null:
		major = version.sw_major
		minor = version.sw_minor
		rev = version.sw_rev
	
	var new_cp = Part.instance()
	new_cp.type = type
	new_cp.software = new_software(major, minor, rev)
	return new_cp

func new_software(major, minor, rev):
	var new_ver = Software.new(major, minor, rev)
	return new_ver

func new_cyborg():
	var new_cy = Cyborg.instance()
	return new_cy

func new_cyborg_manage():
	var new_cm = CyborgManage.instance()
	return new_cm

func new_misison(type, desc):
	var new_m = Mission.instance()
	new_m.set_info(type, desc)
	return new_m

func new_random_cyborg():
	var tuning = {
		'h_min': 50,
		'h_max': 200,
		'a_min': 75,
		'a_max': 300,
	}